<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.springframework.org/schema/security
http://www.springframework.org/schema/security/spring-security-3.1.xsd
http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/util">




<util:properties id="applicationConfig" location="classpath:application.properties"/>
	<context:property-placeholder properties-ref="applicationConfig"/>

	<security:http auto-config="true" disable-url-rewriting="true"
		use-expressions="true">
		<security:logout logout-url="/logout" />
		<security:intercept-url pattern="/" access="permitAll" />
		<security:intercept-url pattern="/register"
			access="permitAll" />
		<security:intercept-url pattern="/oauth"
			access="permitAll" />	
		<security:intercept-url pattern="/login"
			access="permitAll" />
			<security:intercept-url pattern="/resources/**"
			access="permitAll" />	
		<security:intercept-url pattern="/**"
			access="isAuthenticated()" />
		<security:intercept-url pattern="/j_spring_security_check"
			access="permitAll" />	
			


		<security:form-login login-page="/login"
			login-processing-url="/j_spring_security_check"
			 default-target-url="/user"
			always-use-default-target="true" />

	</security:http>

	<security:authentication-manager
		erase-credentials="true">
		<security:authentication-provider
			user-service-ref="userService" />
	</security:authentication-manager>



	<!-- oauth -->
	<bean id="linkedInServiceConfig" class="in.careerscale.apps.ocms.integration.oauth.OAuthServiceConfig">
		<constructor-arg value="${app.config.oauth.linkedin.apikey}" />
		<constructor-arg value="${app.config.oauth.linkedin.apisecret}"/>
		<constructor-arg value="${app.config.oauth.linkedin.callback}"/>
		<constructor-arg value="org.scribe.builder.api.LinkedInApi"/>
	</bean>
	
	<bean id="linkedInServiceProvider" class="in.careerscale.apps.ocms.integration.oauth.OAuthServiceProvider">
		<constructor-arg name="config" ref="linkedInServiceConfig" />
	</bean>
	
	<bean id="facebookServiceConfig" class="in.careerscale.apps.ocms.integration.oauth.OAuthServiceConfig">
		<constructor-arg value="${app.config.oauth.facebook.apikey}" />
		<constructor-arg value="${app.config.oauth.facebook.apisecret}"/>
		<constructor-arg value="${app.config.oauth.facebook.callback}"/>
		<constructor-arg value="org.scribe.builder.api.FacebookApi"/>
	</bean>
	
	<bean id="facebookServiceProvider" class="in.careerscale.apps.ocms.integration.oauth.OAuthServiceProvider">
		<constructor-arg name="config" ref="facebookServiceConfig" />
	</bean>
	
	<bean id="twitterServiceConfig" class="in.careerscale.apps.ocms.integration.oauth.OAuthServiceConfig">
		<constructor-arg value="${app.config.oauth.twitter.apikey}" />
		<constructor-arg value="${app.config.oauth.twitter.apisecret}"/>
		<constructor-arg value="${app.config.oauth.twitter.callback}"/>
		<constructor-arg value="org.scribe.builder.api.TwitterApi"/>
	</bean>
	
	<bean id="twitterServiceProvider" class="in.careerscale.apps.ocms.integration.oauth.OAuthServiceProvider">
		<constructor-arg name="config" ref="twitterServiceConfig" />
	</bean>
	
	<!-- end of oauth -->





</beans>